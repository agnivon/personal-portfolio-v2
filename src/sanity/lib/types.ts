/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type Project = {
  _id: string;
  _type: "project";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  tagline?: string;
  slug?: Slug;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  projectUrl?: string;
  githubUrl?: string;
  coverImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  screenshots?: Array<{
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
    _key: string;
  }>;
  description?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  technologies?: Array<string>;
  keywords?: Array<string>;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Job = {
  _id: string;
  _type: "job";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  name?: string;
  jobTitle?: string;
  logo?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    _type: "image";
  };
  url?: string;
  description?: string;
  startDate?: string;
  endDate?: string;
};

export type Profile = {
  _id: string;
  _type: "profile";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  fullName?: string;
  headline?: string;
  profileImage?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
    };
    hotspot?: SanityImageHotspot;
    crop?: SanityImageCrop;
    alt?: string;
    _type: "image";
  };
  shortBio?: string;
  email?: string;
  location?: string;
  fullBio?: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }>;
  altBio1?: {
    heading?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  altBio2?: {
    heading?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  altBio3?: {
    heading?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  altBio4?: {
    heading?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "normal" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "blockquote";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  };
  resumeURL?: {
    asset?: {
      _ref: string;
      _type: "reference";
      _weak?: boolean;
      [internalGroqTypeReferenceTo]?: "sanity.fileAsset";
    };
    _type: "file";
  };
  socialLinks?: {
    github?: string;
    linkedin?: string;
    twitter?: string;
    twitch?: string;
  };
  otherProfileLinks?: Array<{
    name?: string;
    logo?: {
      asset?: {
        _ref: string;
        _type: "reference";
        _weak?: boolean;
        [internalGroqTypeReferenceTo]?: "sanity.imageAsset";
      };
      hotspot?: SanityImageHotspot;
      crop?: SanityImageCrop;
      alt?: string;
      _type: "image";
    };
    link?: string;
    _key: string;
  }>;
  skills?: Array<string>;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | Geopoint | Project | Slug | Job | Profile | SanityFileAsset | SanityImageCrop | SanityImageHotspot | SanityImageAsset | SanityAssetSourceData | SanityImageMetadata;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./src/sanity/lib/queries.ts
// Variable: PROFILES_QUERY
// Query: *[_type == "profile"]{            _id,            fullName,            headline,            profileImage { alt, "image": asset->url },            shortBio,            location,            fullBio,            altBio1,            altBio2,            altBio3,            altBio4,            email,            "resumeURL": resumeURL.asset->url,            socialLinks,            otherProfileLinks[] { name, link, "logo": logo { alt, "image": asset->url } },            skills          }
export type PROFILES_QUERYResult = Array<{
  _id: string;
  fullName: string | null;
  headline: string | null;
  profileImage: {
    alt: string | null;
    image: string | null;
  } | null;
  shortBio: string | null;
  location: string | null;
  fullBio: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  altBio1: {
    heading?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  altBio2: {
    heading?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  altBio3: {
    heading?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  altBio4: {
    heading?: string;
    description?: Array<{
      children?: Array<{
        marks?: Array<string>;
        text?: string;
        _type: "span";
        _key: string;
      }>;
      style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
      listItem?: "bullet" | "number";
      markDefs?: Array<{
        href?: string;
        _type: "link";
        _key: string;
      }>;
      level?: number;
      _type: "block";
      _key: string;
    }>;
  } | null;
  email: string | null;
  resumeURL: string | null;
  socialLinks: {
    github?: string;
    linkedin?: string;
    twitter?: string;
    twitch?: string;
  } | null;
  otherProfileLinks: Array<{
    name: string | null;
    link: string | null;
    logo: {
      alt: string | null;
      image: string | null;
    } | null;
  }> | null;
  skills: Array<string> | null;
}>;
// Variable: PROFILE_COUNT_QUERY
// Query: count(*[_type == "profile"])
export type PROFILE_COUNT_QUERYResult = number;
// Variable: JOBS_QUERY
// Query: *[_type == "job"] | order(startDate desc){          _id,          name,          jobTitle,          "logo": logo.asset->url,          url,          description,          startDate,          endDate,        }
export type JOBS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  jobTitle: string | null;
  logo: string | null;
  url: string | null;
  description: string | null;
  startDate: string | null;
  endDate: string | null;
}>;
// Variable: PROJECTS_QUERY
// Query: *[_type == "project"] | order(createdAt desc) {          _id,           name,          "slug": slug.current,          tagline,          "logo": logo.asset->url,        }
export type PROJECTS_QUERYResult = Array<{
  _id: string;
  name: string | null;
  slug: string | null;
  tagline: string | null;
  logo: string | null;
}>;
// Variable: PROJECT_BY_SLUG_QUERY
// Query: *[_type == "project" && slug.current == $slug][0]{          _id,          name,          projectUrl,          githubUrl,          "logo": logo.asset->url,          coverImage { alt, "image": asset->url },          screenshots[] { alt, "image": asset->url },          tagline,          description,          technologies,          keywords,        }
export type PROJECT_BY_SLUG_QUERYResult = {
  _id: string;
  name: string | null;
  projectUrl: string | null;
  githubUrl: string | null;
  logo: string | null;
  coverImage: {
    alt: string | null;
    image: string | null;
  } | null;
  screenshots: Array<{
    alt: string | null;
    image: string | null;
  }> | null;
  tagline: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  technologies: Array<string> | null;
  keywords: Array<string> | null;
} | null;
// Variable: PROJECTS_V2_QUERY
// Query: *[_type == "project"]{          _id,          name,          projectUrl,          githubUrl,          coverImage { alt, "image": asset->url },          screenshots[] { alt, "image": asset->url },          tagline,          "logo": logo.asset->url,          description,          technologies,        }
export type PROJECTS_V2_QUERYResult = Array<{
  _id: string;
  name: string | null;
  projectUrl: string | null;
  githubUrl: string | null;
  coverImage: {
    alt: string | null;
    image: string | null;
  } | null;
  screenshots: Array<{
    alt: string | null;
    image: string | null;
  }> | null;
  tagline: string | null;
  logo: string | null;
  description: Array<{
    children?: Array<{
      marks?: Array<string>;
      text?: string;
      _type: "span";
      _key: string;
    }>;
    style?: "blockquote" | "h1" | "h2" | "h3" | "h4" | "h5" | "h6" | "normal";
    listItem?: "bullet" | "number";
    markDefs?: Array<{
      href?: string;
      _type: "link";
      _key: string;
    }>;
    level?: number;
    _type: "block";
    _key: string;
  }> | null;
  technologies: Array<string> | null;
}>;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "*[_type == \"profile\"]{\n            _id,\n            fullName,\n            headline,\n            profileImage { alt, \"image\": asset->url },\n            shortBio,\n            location,\n            fullBio,\n            altBio1,\n            altBio2,\n            altBio3,\n            altBio4,\n            email,\n            \"resumeURL\": resumeURL.asset->url,\n            socialLinks,\n            otherProfileLinks[] { name, link, \"logo\": logo { alt, \"image\": asset->url } },\n            skills\n          }": PROFILES_QUERYResult;
    "count(*[_type == \"profile\"])": PROFILE_COUNT_QUERYResult;
    "*[_type == \"job\"] | order(startDate desc){\n          _id,\n          name,\n          jobTitle,\n          \"logo\": logo.asset->url,\n          url,\n          description,\n          startDate,\n          endDate,\n        }": JOBS_QUERYResult;
    "*[_type == \"project\"] | order(createdAt desc) {\n          _id, \n          name,\n          \"slug\": slug.current,\n          tagline,\n          \"logo\": logo.asset->url,\n        }": PROJECTS_QUERYResult;
    "*[_type == \"project\" && slug.current == $slug][0]{\n          _id,\n          name,\n          projectUrl,\n          githubUrl,\n          \"logo\": logo.asset->url,\n          coverImage { alt, \"image\": asset->url },\n          screenshots[] { alt, \"image\": asset->url },\n          tagline,\n          description,\n          technologies,\n          keywords,\n        }": PROJECT_BY_SLUG_QUERYResult;
    "*[_type == \"project\"]{\n          _id,\n          name,\n          projectUrl,\n          githubUrl,\n          coverImage { alt, \"image\": asset->url },\n          screenshots[] { alt, \"image\": asset->url },\n          tagline,\n          \"logo\": logo.asset->url,\n          description,\n          technologies,\n        }": PROJECTS_V2_QUERYResult;
  }
}
